{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/weixin_favicon.png","path":"weixin_favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"source/images/touxiang.jpg","path":"images/touxiang.jpg","modified":0,"renderable":0},{"_id":"source/images/weixin_reward.jpg","path":"images/weixin_reward.jpg","modified":0,"renderable":0},{"_id":"source/images/zhifubao_reward.jpg","path":"images/zhifubao_reward.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1696994866127},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1696994938883},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1696994938848},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1696994938883},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1696994938888},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1696994938890},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1696994938877},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1696994938891},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1696994938883},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1696994938849},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1696994938850},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1696994938885},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1696994938884},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1696994938883},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1696994938882},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1696994938872},{"_id":"public/2023/10/11/hello-world/index.html","hash":"00c714f8969b1123bf488302dd947731cdc254b8","modified":1697016062161},{"_id":"public/archives/index.html","hash":"e8d72ec5d125032f2ae0223580070c93dbfa71f7","modified":1698205567069},{"_id":"public/archives/2023/index.html","hash":"55ce616d2ba7b51cd731ca1e4cd3fa4d56d01ff4","modified":1698205567069},{"_id":"public/archives/2023/10/index.html","hash":"770652897f77d939d01c287f9dd0d2171bbad970","modified":1698205567069},{"_id":"public/index.html","hash":"6cf6c51292c820a80faffdf63cdcd2a85cde6612","modified":1698205567069},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1697709542056},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1697709542056},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1697709542056},{"_id":"public/css/style.css","hash":"1e8fc1c8ddc8d0230580b951bf659ba1925423bf","modified":1697709542056},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1697709542056},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1697709542056},{"_id":"source/.DS_Store","hash":"70bdf7f4787c056ef374a5c0a3a7ec43b989269f","modified":1697015875327},{"_id":"source/_data/about.json","hash":"57dd8841577d19183bf6d92924027116acf053a3","modified":1697719432859},{"_id":"source/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1696995166491},{"_id":"source/_data/link.json","hash":"eed1f52d6e0003f75e4f78284969ebae72acad79","modified":1697719833263},{"_id":"source/_data/reading.json","hash":"b8846ea4deb209dbdf6d0deb43eb538ba2a440c2","modified":1696997431776},{"_id":"source/about/index.md","hash":"ddebc787dc00580b4f2eacd88b65027d7cf1d40b","modified":1697720087120},{"_id":"source/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1697707183016},{"_id":"source/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1696995166492},{"_id":"themes/raytaylorism/.DS_Store","hash":"9a08a12319a86366f650c8cdb6cfa29f267b813e","modified":1697782237565},{"_id":"themes/raytaylorism/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1696995166491},{"_id":"themes/raytaylorism/.gitignore","hash":"3ba1b7b4baceca12575cc0f212e13a504af994a7","modified":1696995166490},{"_id":"themes/raytaylorism/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1696995166491},{"_id":"themes/raytaylorism/README.md","hash":"23151e838b2f0c029c5cc928dad86105b8c06ba4","modified":1696995166491},{"_id":"themes/raytaylorism/_config.yml","hash":"65b26d766811feffd4a25be988192771b7a89afa","modified":1696995166491},{"_id":"themes/raytaylorism/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1696995166498},{"_id":"themes/raytaylorism/_data/about.json","hash":"068d6827b50f1c0ae7bb7bb1a9032508143a5bc2","modified":1696995166491},{"_id":"themes/raytaylorism/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1696995166491},{"_id":"themes/raytaylorism/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1696995166491},{"_id":"themes/raytaylorism/_data/link.json","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1696995166491},{"_id":"themes/raytaylorism/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1696995166491},{"_id":"themes/raytaylorism/languages/default.yml","hash":"936a72db42d299cd5e912198b9ace4fd64c476fd","modified":1696995166492},{"_id":"themes/raytaylorism/languages/zh-CN.yml","hash":"c5fcb3d2b353d9747238ca78106953301f9a2018","modified":1696995166492},{"_id":"themes/raytaylorism/languages/zh-TW.yml","hash":"ae281c898cea81f4c897c0a69c45e2ce6a4314a6","modified":1696995166492},{"_id":"themes/raytaylorism/layout/about.ejs","hash":"54e74d61dba41f173f111e32deeb58447260f0e3","modified":1696995166497},{"_id":"themes/raytaylorism/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1696995166497},{"_id":"themes/raytaylorism/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1696995166497},{"_id":"themes/raytaylorism/layout/post.ejs","hash":"8e550fd95ef761909294ed3a4aa428ff0509fbf0","modified":1696995166497},{"_id":"themes/raytaylorism/layout/archive.ejs","hash":"0a21af8903e95c6d8bb7554b089ac219e8708ad7","modified":1696995166497},{"_id":"themes/raytaylorism/layout/page.ejs","hash":"90441f114859ce63ef7c7d93d668dbe5939995c2","modified":1696995166497},{"_id":"themes/raytaylorism/layout/reading.ejs","hash":"52906ee0e7e679d417d5bc385e054e16e9ff0256","modified":1696995166498},{"_id":"themes/raytaylorism/layout/tag.ejs","hash":"42ecab14917abd40c0a38e6ab629f089352a24b1","modified":1696995166498},{"_id":"themes/raytaylorism/source/favicon.png","hash":"b855069f865adf74689c11102798635abc55c6e9","modified":1697782740380},{"_id":"themes/raytaylorism/_md/about/index.md","hash":"ee081f0766b1bbdd72b9a254a934033878dd1571","modified":1696995166492},{"_id":"themes/raytaylorism/_md/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1696995166492},{"_id":"themes/raytaylorism/layout/_partial/archive.ejs","hash":"6fc4dc05d153dbf1dd955df4ff19c380692f87e9","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/after_footer.ejs","hash":"77476565bc85987d7656751cbc27b473223b0186","modified":1696995166492},{"_id":"themes/raytaylorism/layout/_partial/archive_title.ejs","hash":"37c38ef6972ddd92668ea08983f4b34230b39d52","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/article.ejs","hash":"068cd4f944f8f0810d06bc79d11042da406c7067","modified":1696995166493},{"_id":"themes/raytaylorism/source/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1696995166509},{"_id":"themes/raytaylorism/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/construction.ejs","hash":"21190b5a0d567ed4ea5d5289459690b72c1452f0","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/footer.ejs","hash":"6634e01d620e2f341c5e3dcda180caf83f042252","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/head.ejs","hash":"406c0bdb3ef224bb5ec375123426a0babae2724a","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/pagenav.ejs","hash":"e7ada8faaee878ea4dde267d1b420bb45421670d","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/float.ejs","hash":"42ad838e39c007226eb4151292a459173e30d8ea","modified":1696995166493},{"_id":"themes/raytaylorism/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_partial/simple_article.ejs","hash":"fdcbb516a3745d0a70c94e565d53510d9f47693c","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1696995166497},{"_id":"themes/raytaylorism/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_widget/tag.ejs","hash":"31b93c078a03af98de504eeb0153f9c0dbc74ed9","modified":1696995166497},{"_id":"themes/raytaylorism/source/css/style.styl","hash":"2c7ef7179e29084efe77c653d537b56889734a22","modified":1696995166508},{"_id":"themes/raytaylorism/layout/_partial/slider.ejs","hash":"bb7b53f6ca9c852808d955fb074f88112e51ea59","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1696995166497},{"_id":"themes/raytaylorism/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1696995166509},{"_id":"themes/raytaylorism/layout/_partial/plugin/analytics.ejs","hash":"b88303620558f833c6d7505af762d12e21f90f90","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/plugin/comment.ejs","hash":"7bdcfd6b3a5b7dee57e9b96ca90a127b7562fc3f","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/plugin/main_javascript.ejs","hash":"cc246117386c6cbde13e3b4316ba5e85af659df6","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/plugin/mathjax.ejs","hash":"7d8c369b14e75d2f120c033d319a4eb749392f38","modified":1696995166494},{"_id":"themes/raytaylorism/layout/_partial/plugin/noscript.ejs","hash":"182650c8be93b093997ac4d5fe14af2f835b98d9","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/plugin/page_stat.ejs","hash":"0dcd6b1185fa311cd5172b25067436f14e6d7429","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/post/prevnext.ejs","hash":"dbb790cf454fda546c82a411a3b50ebb0129a1e8","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/post/readtimes.ejs","hash":"c829d0598f9906f663a8ace1c86f2aa6024d642c","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/post/time.ejs","hash":"e11498240ece670129a2fbfb2fed16ff315344d4","modified":1696995166496},{"_id":"themes/raytaylorism/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1696995166495},{"_id":"themes/raytaylorism/layout/_partial/post/title.ejs","hash":"c6c44ea53bbfd3838c7bf7cc236c6db1a4b9460e","modified":1696995166496},{"_id":"themes/raytaylorism/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1696995166499},{"_id":"themes/raytaylorism/layout/_partial/post/tablecontents.ejs","hash":"a851061909d4e27321d1792a262f55385529fb2d","modified":1696995166495},{"_id":"themes/raytaylorism/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/article.styl","hash":"94bdf4d6da4ec154124ac66008c8dff66882c7e4","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/footer.styl","hash":"92e1c226202782e5d429fbe72b98ae4e07fc0233","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/other.styl","hash":"710eea97e5c98a1426d1a3c0fc8f648279c7a82d","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1696995166499},{"_id":"themes/raytaylorism/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1696995166500},{"_id":"themes/raytaylorism/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1696995166500},{"_id":"themes/raytaylorism/source/css/_partial/syntax.styl","hash":"20df0f8a54729980094514fc726b51591ada1ad7","modified":1696995166500},{"_id":"themes/raytaylorism/source/css/_partial/tablecontents.styl","hash":"e04fa0e7664065077750a7223ae3390cc84a4c56","modified":1696995166500},{"_id":"themes/raytaylorism/source/css/_partial/side_nav.styl","hash":"b239b6b55e87e86d038d6aa821beeb66a9cbaf39","modified":1696995166500},{"_id":"themes/raytaylorism/source/css/_base/icons.css","hash":"ab167f1694ffe10c3c51d18a633efd41be121555","modified":1696995166498},{"_id":"themes/raytaylorism/source/css/_base/lib_customize.styl","hash":"5f25b295a3ad99991952f864573c0f1ccc6a1591","modified":1696995166498},{"_id":"themes/raytaylorism/source/css/_base/layout.styl","hash":"14a747f9fce53f586d11ed67a597a8e71a802d17","modified":1696995166498},{"_id":"themes/raytaylorism/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1696995166498},{"_id":"themes/raytaylorism/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1696995166500},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1696995166508},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1696995166508},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1696995166507},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1696995166503},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1696995166504},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1696995166504},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1696995166504},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1696995166505},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1696995166505},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1696995166505},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1696995166506},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1696995166506},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1696995166506},{"_id":"themes/raytaylorism/source/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1696995166508},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1696995166508},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1696995166507},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1696995166507},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1696995166501},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1696995166503},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1696995166501},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1696995166503},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1696995166504},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1696995166505},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1696995166506},{"_id":"themes/raytaylorism/source/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1696995166509},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1696995166507},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1696995166502},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1696995166502},{"_id":"public/about/index.html","hash":"3576354b6751742cb5ef94985e965fd7179c481a","modified":1698205567069},{"_id":"public/reading/index.html","hash":"475c3da160bf019a26711e1120a15866e91577c5","modified":1698205567069},{"_id":"public/favicon.png","hash":"b855069f865adf74689c11102798635abc55c6e9","modified":1697782788689},{"_id":"public/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1697709542056},{"_id":"public/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1697709542056},{"_id":"public/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1697709542056},{"_id":"public/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1697709542056},{"_id":"public/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1697709542056},{"_id":"public/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1697709542056},{"_id":"public/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1697709542056},{"_id":"public/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1697709542056},{"_id":"public/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1697709542056},{"_id":"public/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1697709542056},{"_id":"public/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1697709542056},{"_id":"public/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1697709542056},{"_id":"public/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1697709542056},{"_id":"public/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1697709542056},{"_id":"public/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1697709542056},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1697006826394},{"_id":"source/images/weixin_reward.jpg","hash":"2f6f32eba026585950131ba8acf836522409e725","modified":1697008251323},{"_id":"source/images/touxiang.jpg","hash":"658c23e9063d91eb3a858afb61d886b03a6e6072","modified":1697006803696},{"_id":"source/images/zhifubao_reward.jpg","hash":"f3bb85c17a0ecd7d2c976c6ba59ceee3db7996ef","modified":1697008244798},{"_id":"source/_posts/.DS_Store","hash":"2f8013f24b2ab7c311237101a4b3741148b3544c","modified":1697178580918},{"_id":"source/_posts/apple-arm-gomonkey-error.md","hash":"c1b2599e07df186a5663a5154a77f68e6d6f7181","modified":1697718693518},{"_id":"source/_posts/mysql-varchar-length.md","hash":"635b6682fbe2b0b07cee471b46ca4d6a53491fca","modified":1697718792991},{"_id":"source/_posts/apple-arm-gomonkey-error/1280X1280.png","hash":"e4db6ad5a0f0ac13318b8783d7acdc239d523d22","modified":1697015500056},{"_id":"public/2023/10/11/apple-arm-gomonkey-error/index.html","hash":"008d4b5cccac0806d170c434bb8f5f38ad6b7cf6","modified":1698205567069},{"_id":"public/2023/10/11/mysql-varchar-length/index.html","hash":"f1c6087073c9a7f1490233d153d56eed5e3f74bf","modified":1698205567069},{"_id":"public/images/weixin_reward.jpg","hash":"2f6f32eba026585950131ba8acf836522409e725","modified":1697709542056},{"_id":"public/2023/10/11/apple-arm-gomonkey-error/1280X1280.png","hash":"e4db6ad5a0f0ac13318b8783d7acdc239d523d22","modified":1697709542056},{"_id":"public/images/touxiang.jpg","hash":"658c23e9063d91eb3a858afb61d886b03a6e6072","modified":1697709542056},{"_id":"public/images/zhifubao_reward.jpg","hash":"f3bb85c17a0ecd7d2c976c6ba59ceee3db7996ef","modified":1697709542056},{"_id":"source/_posts/apple-arm-gomonkey-error/apple-arm-gomonkey-error.md","hash":"aa44e578f3c2b9eb54126e7dc011c5b876dd42a0","modified":1697096978062},{"_id":"public/2023/10/11/apple-arm-gomonkey-error/apple-arm-gomonkey-error/index.html","hash":"cf8362d909d48a9bae755d696971660fc275e3dd","modified":1697097042202},{"_id":"public/search.xml","hash":"153f966386446af869616ef41851de865ea21d0d","modified":1698227499633},{"_id":"source/_data/slider.json.delete","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1697713096889},{"_id":"source/_data/hint.json.delete","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1697718222417},{"_id":"public/categories/技术/index.html","hash":"4d8e8348d5244d8ca49867c2be8a54b224b21ab9","modified":1698205567069},{"_id":"public/categories/技术/编程语言/index.html","hash":"c897c292a94de8f1fd53d42b056e5e7a71a65317","modified":1698205567069},{"_id":"public/categories/技术/数据库/index.html","hash":"89d773dd38f0f99804ca6b87aac67e83fa168880","modified":1698205567069},{"_id":"public/categories/技术/编程语言/Go/index.html","hash":"c964fcb02415ec473f26ed6806dc69446b8bb055","modified":1698205567069},{"_id":"public/categories/技术/数据库/MySQL/index.html","hash":"6b144c9aa5ac0426212342bd2ec03122743fa102","modified":1698205567069},{"_id":"public/tags/arm/index.html","hash":"2cbb61dc83ec8c1c0aab3f05fc220788deba02d1","modified":1698205567069},{"_id":"public/tags/gomonkey/index.html","hash":"b928c8ef6ce7168d43141e51caf4d9b23d5db37e","modified":1698205567069},{"_id":"public/tags/MySQL/index.html","hash":"c50204a0ecc1c38f0ca7a985330ebca75daf15d1","modified":1698205567069},{"_id":"public/tags/varchar/index.html","hash":"ff52d4a3d9f86a4c784c5716cb9f5935e04164f7","modified":1698205567069},{"_id":"source/_posts/golang-single-instance.md","hash":"1bd51c4545a5756e4f9c5dac4ec654cae3ac8904","modified":1698227483838},{"_id":"public/2023/10/19/golang-single-instance/index.html","hash":"f9a18d00190e3829812554818527bc370cc527d3","modified":1698227499633},{"_id":"public/tags/Go/index.html","hash":"72a1312dea716d125424d809fbc3d6921c6ee738","modified":1698205567069},{"_id":"public/tags/Go内存模型/index.html","hash":"ea4ccf1fc027f2722ad3320af82cec871095cef4","modified":1698205567069},{"_id":"public/tags/并发/index.html","hash":"c6ff7ec99dc7e9507526b1027c6fe0cd2a9076e8","modified":1698205567069},{"_id":"public/tags/单例/index.html","hash":"9405011f116444d51cf2c1bd59aa5f8a9c996c25","modified":1698205567069},{"_id":"themes/raytaylorism/source/.DS_Store","hash":"3470633b38c06c2ca0e745aa1c00a408fc6a2d08","modified":1697782243615},{"_id":"source/_posts/golang-defer.md","hash":"d83dbc29d9f4e2789b93f37c4a85e80cdfe1f770","modified":1698227137790},{"_id":"public/2023/10/24/golang-defer/index.html","hash":"e01ae8e9efe7db36f90f60e5df987899eec5bbdb","modified":1698227499633},{"_id":"public/tags/defer/index.html","hash":"159edf0b26ea7c8db97b46e1749c152bd64e7230","modified":1698205567069},{"_id":"source/_posts/golang-exception-handle.md","hash":"2ce7041e1f3cb0872f7d475fa73eeeb856df8a75","modified":1698227074673},{"_id":"public/2023/10/25/golang-exception-handle/index.html","hash":"cd22761755e71dc028fb997f9c2573d31c794f63","modified":1698227499633},{"_id":"public/tags/panic/index.html","hash":"832720ffe7cab238e0a1ea197c54fdc0ada45082","modified":1698205567069},{"_id":"public/tags/recover/index.html","hash":"84cb06a05091458d37ef650f8bd9d8d5571ce267","modified":1698205567069}],"Category":[{"name":"技术","_id":"clnx5xrpr000081l24q4p3ci1"},{"name":"编程语言","parent":"clnx5xrpr000081l24q4p3ci1","_id":"clnx5xrpt000481l2f1b28bn6"},{"name":"数据库","parent":"clnx5xrpr000081l24q4p3ci1","_id":"clnx5xrpt000881l2dhhrgvld"},{"name":"Go","parent":"clnx5xrpt000481l2f1b28bn6","_id":"clnx5xrpu000a81l26v29060h"},{"name":"MySQL","parent":"clnx5xrpt000881l2dhhrgvld","_id":"clnx5xrpu000d81l21nymfg8s"}],"Data":[{"_id":"about","data":{"avatar":"../images/touxiang.jpg","name":"陈泽平","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]}},{"_id":"link","data":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Go":"https://go.dev/","PHP":"https://www.php.net/"}}},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}}},{"_id":"hint.json","data":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n"},{"_id":"slider.json","data":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}],"Page":[{"title":"关于","layout":"about","_content":"大家好，我是陈泽平，欢迎来到我的个人技术博客。\n邮箱：chenzeping1016@126.com\n微信：grugczp","source":"about/index.md","raw":"title: 关于\nlayout: about\n---\n大家好，我是陈泽平，欢迎来到我的个人技术博客。\n邮箱：chenzeping1016@126.com\n微信：grugczp","date":"2023-10-19T12:54:47.120Z","updated":"2023-10-19T12:54:47.120Z","path":"about/index.html","_id":"clnl7cmvx0000eml2arorgu12","comments":1,"content":"<p>大家好，我是陈泽平，欢迎来到我的个人技术博客。<br>邮箱：<a href=\"mailto:&#x63;&#x68;&#101;&#x6e;&#122;&#101;&#x70;&#105;&#x6e;&#x67;&#x31;&#x30;&#x31;&#x36;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;\">&#x63;&#x68;&#101;&#x6e;&#122;&#101;&#x70;&#105;&#x6e;&#x67;&#x31;&#x30;&#x31;&#x36;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;</a><br>微信：grugczp</p>\n","site":{"data":{"about":{"avatar":"../images/touxiang.jpg","name":"陈泽平","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]},"link":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Go":"https://go.dev/","PHP":"https://www.php.net/"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}},"hint.json":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n","slider.json":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}},"excerpt":"","more":"<p>大家好，我是陈泽平，欢迎来到我的个人技术博客。<br>邮箱：<a href=\"mailto:&#x63;&#x68;&#101;&#x6e;&#122;&#101;&#x70;&#105;&#x6e;&#x67;&#x31;&#x30;&#x31;&#x36;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;\">&#x63;&#x68;&#101;&#x6e;&#122;&#101;&#x70;&#105;&#x6e;&#x67;&#x31;&#x30;&#x31;&#x36;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#x6d;</a><br>微信：grugczp</p>\n"},{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2023-10-11T03:35:29.938Z","updated":"2023-10-11T03:32:46.492Z","path":"reading/index.html","comments":1,"_id":"clnl7cmvz0001eml2acd01n7j","content":"","site":{"data":{"about":{"avatar":"http://ww2.sinaimg.cn/small/74990035jw1f1rjkd681bj20rs0rsdhg.jpg","name":"你的大名","tag":"Web前端/iOS/技术宅","desc":"你的简介（建议一两句话）","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["https://raytaylorlin-blog.oss-cn-shenzhen.aliyuncs.com/image/about/weixin_reward.png","https://raytaylorlin-blog.oss-cn-shenzhen.aliyuncs.com/image/about/zhifubao_reward.png"]},"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"link":{"social":{"weibo":"http://weibo.com/1956184117","github":"https://github.com/raytaylorlin","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/raytaylorlin"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}},"slider":[{"image":"http://lorempixel.com/580/250/nature/1","align":"center","title":"This is our big Tagline!","subtitle":"Here's our small slogan.","link":"/"},{"image":"http://lorempixel.com/580/250/nature/2","align":"left","title":"Left Aligned Caption","subtitle":"Here's our small slogan.","link":null},{"image":"http://lorempixel.com/580/250/nature/3","align":"right","title":"Right Aligned Caption","subtitle":"Here's our small slogan.","link":null}]}},"excerpt":"","more":""}],"Post":[{"title":"MySQL中varchar类型长度设置为多少合适","date":"2023-10-11T08:12:33.000Z","_content":"# varchar类型长度常见设置\n\n经常会看到大家设置varchar类型长度，一般都设置为255，那为什么不是其他数字呢？<br>\n以下针对我们常用的*innodb*存储引擎。\n\n# varchar(255)和varchar(256)区别\nvarchar(255)需要1个字节记录字符串长度，而varchar(256)则需要2个字节记录字符串长度。  \n因此varchar(255)和varchar(256)，优先选择varchar(255)。\n\n# varchar(64)和varchar(255)区别\n1. 对于字符串长度超过64的，varchar(64)的sql会报错  \n2. 对于字符串长度不超过64的，两者在磁盘存储上没有区别\n    1. 都是1个字节记录字符串长度\n    2. 由于innodb将varchar类型数据独立于聚簇索引单独存储，占用空间取决于实际字符串长度\n\n所以如果字段长度不超过64，那么使用varchar(255)也没问题，但是如果该字段建**索引**了，那就不一样了：\n建立索引时如果没有限制索引的大小，索引长度会默认采用的该字段类型的长度，因此用varchar(255)类型会占用更多的空间，加载索引信息时也会占用更多的内存，索引性能相对来说会较差。\n\n# 结论\n因此当我们设置varchar长度时，如果该字段确定不会拿来做索引，可以设置稍微长一点，比如varchar(255)，这样字段长度会更灵活一些；如果该字段有可能会被拿来做索引，那么就按需尽量设置的小一点，这样索引会有更好的性能。","source":"_posts/mysql-varchar-length.md","raw":"---\ntitle: MySQL中varchar类型长度设置为多少合适\ndate: 2023-10-11 16:12:33\ntags:\n  - MySQL\n  - varchar\ncategories:\n  - 技术\n  - 数据库\n  - MySQL\n---\n# varchar类型长度常见设置\n\n经常会看到大家设置varchar类型长度，一般都设置为255，那为什么不是其他数字呢？<br>\n以下针对我们常用的*innodb*存储引擎。\n\n# varchar(255)和varchar(256)区别\nvarchar(255)需要1个字节记录字符串长度，而varchar(256)则需要2个字节记录字符串长度。  \n因此varchar(255)和varchar(256)，优先选择varchar(255)。\n\n# varchar(64)和varchar(255)区别\n1. 对于字符串长度超过64的，varchar(64)的sql会报错  \n2. 对于字符串长度不超过64的，两者在磁盘存储上没有区别\n    1. 都是1个字节记录字符串长度\n    2. 由于innodb将varchar类型数据独立于聚簇索引单独存储，占用空间取决于实际字符串长度\n\n所以如果字段长度不超过64，那么使用varchar(255)也没问题，但是如果该字段建**索引**了，那就不一样了：\n建立索引时如果没有限制索引的大小，索引长度会默认采用的该字段类型的长度，因此用varchar(255)类型会占用更多的空间，加载索引信息时也会占用更多的内存，索引性能相对来说会较差。\n\n# 结论\n因此当我们设置varchar长度时，如果该字段确定不会拿来做索引，可以设置稍微长一点，比如varchar(255)，这样字段长度会更灵活一些；如果该字段有可能会被拿来做索引，那么就按需尽量设置的小一点，这样索引会有更好的性能。","slug":"mysql-varchar-length","published":1,"updated":"2023-10-25T09:46:21.618Z","_id":"clnlh3nnh0000e1l2c8msbwqd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"varchar类型长度常见设置\"><a href=\"#varchar类型长度常见设置\" class=\"headerlink\" title=\"varchar类型长度常见设置\"></a>varchar类型长度常见设置</h1><p>经常会看到大家设置varchar类型长度，一般都设置为255，那为什么不是其他数字呢？<br><br>以下针对我们常用的<em>innodb</em>存储引擎。</p>\n<h1 id=\"varchar-255-和varchar-256-区别\"><a href=\"#varchar-255-和varchar-256-区别\" class=\"headerlink\" title=\"varchar(255)和varchar(256)区别\"></a>varchar(255)和varchar(256)区别</h1><p>varchar(255)需要1个字节记录字符串长度，而varchar(256)则需要2个字节记录字符串长度。<br>因此varchar(255)和varchar(256)，优先选择varchar(255)。</p>\n<h1 id=\"varchar-64-和varchar-255-区别\"><a href=\"#varchar-64-和varchar-255-区别\" class=\"headerlink\" title=\"varchar(64)和varchar(255)区别\"></a>varchar(64)和varchar(255)区别</h1><ol>\n<li>对于字符串长度超过64的，varchar(64)的sql会报错  </li>\n<li>对于字符串长度不超过64的，两者在磁盘存储上没有区别<ol>\n<li>都是1个字节记录字符串长度</li>\n<li>由于innodb将varchar类型数据独立于聚簇索引单独存储，占用空间取决于实际字符串长度</li>\n</ol>\n</li>\n</ol>\n<p>所以如果字段长度不超过64，那么使用varchar(255)也没问题，但是如果该字段建<strong>索引</strong>了，那就不一样了：<br>建立索引时如果没有限制索引的大小，索引长度会默认采用的该字段类型的长度，因此用varchar(255)类型会占用更多的空间，加载索引信息时也会占用更多的内存，索引性能相对来说会较差。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>因此当我们设置varchar长度时，如果该字段确定不会拿来做索引，可以设置稍微长一点，比如varchar(255)，这样字段长度会更灵活一些；如果该字段有可能会被拿来做索引，那么就按需尽量设置的小一点，这样索引会有更好的性能。</p>\n","site":{"data":{"about":{"avatar":"../images/touxiang.jpg","name":"陈泽平","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]},"link":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Go":"https://go.dev/","PHP":"https://www.php.net/"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}},"hint.json":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n","slider.json":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}},"excerpt":"","more":"<h1 id=\"varchar类型长度常见设置\"><a href=\"#varchar类型长度常见设置\" class=\"headerlink\" title=\"varchar类型长度常见设置\"></a>varchar类型长度常见设置</h1><p>经常会看到大家设置varchar类型长度，一般都设置为255，那为什么不是其他数字呢？<br><br>以下针对我们常用的<em>innodb</em>存储引擎。</p>\n<h1 id=\"varchar-255-和varchar-256-区别\"><a href=\"#varchar-255-和varchar-256-区别\" class=\"headerlink\" title=\"varchar(255)和varchar(256)区别\"></a>varchar(255)和varchar(256)区别</h1><p>varchar(255)需要1个字节记录字符串长度，而varchar(256)则需要2个字节记录字符串长度。<br>因此varchar(255)和varchar(256)，优先选择varchar(255)。</p>\n<h1 id=\"varchar-64-和varchar-255-区别\"><a href=\"#varchar-64-和varchar-255-区别\" class=\"headerlink\" title=\"varchar(64)和varchar(255)区别\"></a>varchar(64)和varchar(255)区别</h1><ol>\n<li>对于字符串长度超过64的，varchar(64)的sql会报错  </li>\n<li>对于字符串长度不超过64的，两者在磁盘存储上没有区别<ol>\n<li>都是1个字节记录字符串长度</li>\n<li>由于innodb将varchar类型数据独立于聚簇索引单独存储，占用空间取决于实际字符串长度</li>\n</ol>\n</li>\n</ol>\n<p>所以如果字段长度不超过64，那么使用varchar(255)也没问题，但是如果该字段建<strong>索引</strong>了，那就不一样了：<br>建立索引时如果没有限制索引的大小，索引长度会默认采用的该字段类型的长度，因此用varchar(255)类型会占用更多的空间，加载索引信息时也会占用更多的内存，索引性能相对来说会较差。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>因此当我们设置varchar长度时，如果该字段确定不会拿来做索引，可以设置稍微长一点，比如varchar(255)，这样字段长度会更灵活一些；如果该字段有可能会被拿来做索引，那么就按需尽量设置的小一点，这样索引会有更好的性能。</p>\n"},{"title":"Apple arm架构下gomonkey报错问题解决","date":"2023-10-11T09:11:01.000Z","_content":"# 问题一： undefined: buildJmpDirective\n需要将gomonkey升级到github.com/agiledragon/gomonkey/v2\n\n# 问题二：permission denied\n修改modify_binary_darwin.go文件，去掉syscall.PROT_EXEC\n![](/2023/10/11/apple-arm-gomonkey-error/1280X1280.png)\n","source":"_posts/apple-arm-gomonkey-error.md","raw":"---\ntitle: Apple arm架构下gomonkey报错问题解决\ndate: 2023-10-11 17:11:01\ntags:\n  - arm\n  - gomonkey\ncategories:\n  - 技术\n  - 编程语言\n  - Go\n---\n# 问题一： undefined: buildJmpDirective\n需要将gomonkey升级到github.com/agiledragon/gomonkey/v2\n\n# 问题二：permission denied\n修改modify_binary_darwin.go文件，去掉syscall.PROT_EXEC\n![](/2023/10/11/apple-arm-gomonkey-error/1280X1280.png)\n","slug":"apple-arm-gomonkey-error","published":1,"updated":"2023-10-19T12:31:33.518Z","_id":"clnmvsboc0000kgl21t39fp03","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"问题一：-undefined-buildJmpDirective\"><a href=\"#问题一：-undefined-buildJmpDirective\" class=\"headerlink\" title=\"问题一： undefined: buildJmpDirective\"></a>问题一： undefined: buildJmpDirective</h1><p>需要将gomonkey升级到github.com&#x2F;agiledragon&#x2F;gomonkey&#x2F;v2</p>\n<h1 id=\"问题二：permission-denied\"><a href=\"#问题二：permission-denied\" class=\"headerlink\" title=\"问题二：permission denied\"></a>问题二：permission denied</h1><p>修改modify_binary_darwin.go文件，去掉syscall.PROT_EXEC<br><img src=\"/2023/10/11/apple-arm-gomonkey-error/1280X1280.png\"></p>\n","site":{"data":{"about":{"avatar":"../images/touxiang.jpg","name":"分地瓜","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]},"link":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Github地址":"https://github.com/nosewheel"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}},"hint.json":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n","slider.json":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}},"excerpt":"","more":"<h1 id=\"问题一：-undefined-buildJmpDirective\"><a href=\"#问题一：-undefined-buildJmpDirective\" class=\"headerlink\" title=\"问题一： undefined: buildJmpDirective\"></a>问题一： undefined: buildJmpDirective</h1><p>需要将gomonkey升级到github.com&#x2F;agiledragon&#x2F;gomonkey&#x2F;v2</p>\n<h1 id=\"问题二：permission-denied\"><a href=\"#问题二：permission-denied\" class=\"headerlink\" title=\"问题二：permission denied\"></a>问题二：permission denied</h1><p>修改modify_binary_darwin.go文件，去掉syscall.PROT_EXEC<br><img src=\"/2023/10/11/apple-arm-gomonkey-error/1280X1280.png\"></p>\n"},{"title":"Golang中的单例模式","date":"2023-10-19T13:12:44.000Z","_content":"Go语言中如何实现一个单例？很多Go语言学习者可能觉得这是一个很简单的问题，闭着眼都能写出来。但是其代码实现往往存在不少问题，下面先看一下一些常见的错误。\n# 常见错误\n## 没考虑并发安全\n示例代码：\n```\ntype User struct {\n    Name string\n}\n\nvar instance *User\n\nfunc GetInstance() *User {\n    if instance == nil {\n        instance = &User{\n            Name: \"xiaoming\",\n        }\n    }\n    return instance\n}\n```\n上面示例中，多个goroutine有可能同时执行第一个检查，然后instance就会被执行多次赋值操作，在某些instance只能被赋值一次的业务场景，该操作就可能导致与期望不一致。\n## 忽略代码非原子操作问题\n针对上面示例存在的并发问题，部分开发人员想我加个锁，问题不就解决了吗，于是将上面示例代码修改成如下：\n```\ntype User struct {\n    Name string\n}\n\nvar (\n    lock     sync.Mutex\n    instance *User\n)\n\nfunc GetInstance() *User {\n    if instance == nil {\n        lock.Lock()\n        defer lock.Unlock()\n        if instance == nil {\n            instance = &User{\n                Name: \"xiaoming\",\n            }\n        }\n    }\n    return instance\n}\n```\n如上示例代码看似已经很完美了，但是当我们用go run -race检查时，会提示这段代码有DATA RACE的警告：\n>WARNING: DATA RACE\n>Write at 0x00010507e6a0 by goroutine 6:\n>  main.GetInstance()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:22 +0xf4\n>  main.main.func1()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:32 +0x20\n>\n>Previous read at 0x00010507e6a0 by goroutine 8:\n>  main.GetInstance()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:18 +0x30\n>  main.main.func3()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:38 +0x20\n>\n>Goroutine 6 (running) created at:\n>  main.main()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:31 +0x28\n>\n>Goroutine 8 (running) created at:\n>  main.main()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:37 +0x40\n\n大家可以亲自试一下，go_race_demo.go完整代码如下：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\ntype User struct {\n    Name string\n}\n\nvar (\n    lock     sync.Mutex\n    instance *User\n)\n\nfunc GetInstance() *User {\n    if instance == nil {\n        lock.Lock()\n        defer lock.Unlock()\n        if instance == nil {\n            instance = &User{\n                Name: \"xiaoming\",\n            }\n        }\n    }\n    return instance\n}\n\nfunc main() {\n    go func() {\n        fmt.Println(\"goroutine A\", GetInstance())\n    }()\n    go func() {\n        fmt.Println(\"goroutine B\", GetInstance())\n    }()\n    go func() {\n        fmt.Println(\"goroutine C\", GetInstance())\n    }()\n}\n```\n之所以会出现DATA RACE警告，是因为CPU在执行instance=&User{Name:\"xiaoming\"}这行代码时，并不是原子操作，这个赋值可能是会有几步指令，比如\n1. 先new一个User\n2. 然后设置Name=xiaoming\n3. 最后把了new的对象赋值给instance\n\n而且多个指令执行时，有可能会是乱序的，如果发生了乱序，可能会变成\n1. 先了new一个User\n2. 然后再赋值给instance\n3. 最后再设置Name=xiaoming\n\ngoroutine A进来时拿到锁，然后执行instance=&User{Name:\"xiaoming\"}这句代码，这个时候有可能刚执行完指令2，还未执行指令3时，goroutine B对instance是否为nil进行了判断，发现非nil，就直接将instance的数据返回了，而此时的instance是个半初始化状态，这时就会有问题。\n# 正确姿势\n解决上面的问题，我们可以通过原子化加载并设置一个标志flag，该标志表明我们是否已初始化instance，改造后代码如下：\n```\ntype User struct {\n    Name string\n}\n\nvar (\n    lock     sync.Mutex\n    instance *User\n    flag     uint32\n)\n\nfunc GetInstance() *User {\n    if atomic.LoadUint32(&flag) != 1 {\n        lock.Lock()\n        defer lock.Unlock()\n        if instance == nil {\n            instance = &User{\n                Name: \"xiaoming\",\n            }\n            atomic.StoreUint32(&flag, 1)\n        }\n    }\n    return instance\n}\n```\n这里，我们主要是通过atomic.store和lock来保证flag和instance的修改对其他的goroutine可见，通过atomic.LoadUint32(&flag)和double check来保证instance只会被初始化一次。  \n但是，这看起来有点繁琐，其实Go语言标准库sync已经为我们提供了实现goroutine同步比较好的方式，通过`sync.Once`来实现，示例代码如下：\n```\ntype User struct {\n    Name string\n}\n\nvar (\n    once sync.Once\n    instance *User\n)\n\nfunc GetInstance() *User {\n    once.Do(func() {\n        instance = &User{\n            Name: \"xiaoming\",\n        }\n    })\n    return instance\n}\n```\n因此，我们可以首选`sync.Once`来实现单例模式。\n","source":"_posts/golang-single-instance.md","raw":"---\ntitle: Golang中的单例模式\ndate: 2023-10-19 21:12:44\ntags:\n  - Go\n  - 单例\n  - 并发\n  - Go内存模型\ncategories:\n  - 技术\n  - 编程语言\n  - Go\n---\nGo语言中如何实现一个单例？很多Go语言学习者可能觉得这是一个很简单的问题，闭着眼都能写出来。但是其代码实现往往存在不少问题，下面先看一下一些常见的错误。\n# 常见错误\n## 没考虑并发安全\n示例代码：\n```\ntype User struct {\n    Name string\n}\n\nvar instance *User\n\nfunc GetInstance() *User {\n    if instance == nil {\n        instance = &User{\n            Name: \"xiaoming\",\n        }\n    }\n    return instance\n}\n```\n上面示例中，多个goroutine有可能同时执行第一个检查，然后instance就会被执行多次赋值操作，在某些instance只能被赋值一次的业务场景，该操作就可能导致与期望不一致。\n## 忽略代码非原子操作问题\n针对上面示例存在的并发问题，部分开发人员想我加个锁，问题不就解决了吗，于是将上面示例代码修改成如下：\n```\ntype User struct {\n    Name string\n}\n\nvar (\n    lock     sync.Mutex\n    instance *User\n)\n\nfunc GetInstance() *User {\n    if instance == nil {\n        lock.Lock()\n        defer lock.Unlock()\n        if instance == nil {\n            instance = &User{\n                Name: \"xiaoming\",\n            }\n        }\n    }\n    return instance\n}\n```\n如上示例代码看似已经很完美了，但是当我们用go run -race检查时，会提示这段代码有DATA RACE的警告：\n>WARNING: DATA RACE\n>Write at 0x00010507e6a0 by goroutine 6:\n>  main.GetInstance()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:22 +0xf4\n>  main.main.func1()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:32 +0x20\n>\n>Previous read at 0x00010507e6a0 by goroutine 8:\n>  main.GetInstance()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:18 +0x30\n>  main.main.func3()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:38 +0x20\n>\n>Goroutine 6 (running) created at:\n>  main.main()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:31 +0x28\n>\n>Goroutine 8 (running) created at:\n>  main.main()\n>      /Users/chenzeping/go/src/gostudy/race/go_race_demo.go:37 +0x40\n\n大家可以亲自试一下，go_race_demo.go完整代码如下：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\ntype User struct {\n    Name string\n}\n\nvar (\n    lock     sync.Mutex\n    instance *User\n)\n\nfunc GetInstance() *User {\n    if instance == nil {\n        lock.Lock()\n        defer lock.Unlock()\n        if instance == nil {\n            instance = &User{\n                Name: \"xiaoming\",\n            }\n        }\n    }\n    return instance\n}\n\nfunc main() {\n    go func() {\n        fmt.Println(\"goroutine A\", GetInstance())\n    }()\n    go func() {\n        fmt.Println(\"goroutine B\", GetInstance())\n    }()\n    go func() {\n        fmt.Println(\"goroutine C\", GetInstance())\n    }()\n}\n```\n之所以会出现DATA RACE警告，是因为CPU在执行instance=&User{Name:\"xiaoming\"}这行代码时，并不是原子操作，这个赋值可能是会有几步指令，比如\n1. 先new一个User\n2. 然后设置Name=xiaoming\n3. 最后把了new的对象赋值给instance\n\n而且多个指令执行时，有可能会是乱序的，如果发生了乱序，可能会变成\n1. 先了new一个User\n2. 然后再赋值给instance\n3. 最后再设置Name=xiaoming\n\ngoroutine A进来时拿到锁，然后执行instance=&User{Name:\"xiaoming\"}这句代码，这个时候有可能刚执行完指令2，还未执行指令3时，goroutine B对instance是否为nil进行了判断，发现非nil，就直接将instance的数据返回了，而此时的instance是个半初始化状态，这时就会有问题。\n# 正确姿势\n解决上面的问题，我们可以通过原子化加载并设置一个标志flag，该标志表明我们是否已初始化instance，改造后代码如下：\n```\ntype User struct {\n    Name string\n}\n\nvar (\n    lock     sync.Mutex\n    instance *User\n    flag     uint32\n)\n\nfunc GetInstance() *User {\n    if atomic.LoadUint32(&flag) != 1 {\n        lock.Lock()\n        defer lock.Unlock()\n        if instance == nil {\n            instance = &User{\n                Name: \"xiaoming\",\n            }\n            atomic.StoreUint32(&flag, 1)\n        }\n    }\n    return instance\n}\n```\n这里，我们主要是通过atomic.store和lock来保证flag和instance的修改对其他的goroutine可见，通过atomic.LoadUint32(&flag)和double check来保证instance只会被初始化一次。  \n但是，这看起来有点繁琐，其实Go语言标准库sync已经为我们提供了实现goroutine同步比较好的方式，通过`sync.Once`来实现，示例代码如下：\n```\ntype User struct {\n    Name string\n}\n\nvar (\n    once sync.Once\n    instance *User\n)\n\nfunc GetInstance() *User {\n    once.Do(func() {\n        instance = &User{\n            Name: \"xiaoming\",\n        }\n    })\n    return instance\n}\n```\n因此，我们可以首选`sync.Once`来实现单例模式。\n","slug":"golang-single-instance","published":1,"updated":"2023-10-25T09:51:23.838Z","_id":"clnxzbf1t0000mml25vvk1gnb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Go语言中如何实现一个单例？很多Go语言学习者可能觉得这是一个很简单的问题，闭着眼都能写出来。但是其代码实现往往存在不少问题，下面先看一下一些常见的错误。</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><h2 id=\"没考虑并发安全\"><a href=\"#没考虑并发安全\" class=\"headerlink\" title=\"没考虑并发安全\"></a>没考虑并发安全</h2><p>示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var instance *User</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if instance == nil &#123;</span><br><span class=\"line\">        instance = &amp;User&#123;</span><br><span class=\"line\">            Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例中，多个goroutine有可能同时执行第一个检查，然后instance就会被执行多次赋值操作，在某些instance只能被赋值一次的业务场景，该操作就可能导致与期望不一致。</p>\n<h2 id=\"忽略代码非原子操作问题\"><a href=\"#忽略代码非原子操作问题\" class=\"headerlink\" title=\"忽略代码非原子操作问题\"></a>忽略代码非原子操作问题</h2><p>针对上面示例存在的并发问题，部分开发人员想我加个锁，问题不就解决了吗，于是将上面示例代码修改成如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    lock     sync.Mutex</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if instance == nil &#123;</span><br><span class=\"line\">        lock.Lock()</span><br><span class=\"line\">        defer lock.Unlock()</span><br><span class=\"line\">        if instance == nil &#123;</span><br><span class=\"line\">            instance = &amp;User&#123;</span><br><span class=\"line\">                Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上示例代码看似已经很完美了，但是当我们用go run -race检查时，会提示这段代码有DATA RACE的警告：</p>\n<blockquote>\n<p>WARNING: DATA RACE<br>Write at 0x00010507e6a0 by goroutine 6:<br> main.GetInstance()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:22 +0xf4<br> main.main.func1()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:32 +0x20</p>\n<p>Previous read at 0x00010507e6a0 by goroutine 8:<br> main.GetInstance()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:18 +0x30<br> main.main.func3()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:38 +0x20</p>\n<p>Goroutine 6 (running) created at:<br> main.main()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:31 +0x28</p>\n<p>Goroutine 8 (running) created at:<br> main.main()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:37 +0x40</p>\n</blockquote>\n<p>大家可以亲自试一下，go_race_demo.go完整代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    lock     sync.Mutex</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if instance == nil &#123;</span><br><span class=\"line\">        lock.Lock()</span><br><span class=\"line\">        defer lock.Unlock()</span><br><span class=\"line\">        if instance == nil &#123;</span><br><span class=\"line\">            instance = &amp;User&#123;</span><br><span class=\"line\">                Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;goroutine A&quot;, GetInstance())</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;goroutine B&quot;, GetInstance())</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;goroutine C&quot;, GetInstance())</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之所以会出现DATA RACE警告，是因为CPU在执行instance&#x3D;&amp;User{Name:”xiaoming”}这行代码时，并不是原子操作，这个赋值可能是会有几步指令，比如</p>\n<ol>\n<li>先new一个User</li>\n<li>然后设置Name&#x3D;xiaoming</li>\n<li>最后把了new的对象赋值给instance</li>\n</ol>\n<p>而且多个指令执行时，有可能会是乱序的，如果发生了乱序，可能会变成</p>\n<ol>\n<li>先了new一个User</li>\n<li>然后再赋值给instance</li>\n<li>最后再设置Name&#x3D;xiaoming</li>\n</ol>\n<p>goroutine A进来时拿到锁，然后执行instance&#x3D;&amp;User{Name:”xiaoming”}这句代码，这个时候有可能刚执行完指令2，还未执行指令3时，goroutine B对instance是否为nil进行了判断，发现非nil，就直接将instance的数据返回了，而此时的instance是个半初始化状态，这时就会有问题。</p>\n<h1 id=\"正确姿势\"><a href=\"#正确姿势\" class=\"headerlink\" title=\"正确姿势\"></a>正确姿势</h1><p>解决上面的问题，我们可以通过原子化加载并设置一个标志flag，该标志表明我们是否已初始化instance，改造后代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    lock     sync.Mutex</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">    flag     uint32</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if atomic.LoadUint32(&amp;flag) != 1 &#123;</span><br><span class=\"line\">        lock.Lock()</span><br><span class=\"line\">        defer lock.Unlock()</span><br><span class=\"line\">        if instance == nil &#123;</span><br><span class=\"line\">            instance = &amp;User&#123;</span><br><span class=\"line\">                Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            atomic.StoreUint32(&amp;flag, 1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，我们主要是通过atomic.store和lock来保证flag和instance的修改对其他的goroutine可见，通过atomic.LoadUint32(&amp;flag)和double check来保证instance只会被初始化一次。<br>但是，这看起来有点繁琐，其实Go语言标准库sync已经为我们提供了实现goroutine同步比较好的方式，通过<code>sync.Once</code>来实现，示例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    once sync.Once</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    once.Do(func() &#123;</span><br><span class=\"line\">        instance = &amp;User&#123;</span><br><span class=\"line\">            Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，我们可以首选<code>sync.Once</code>来实现单例模式。</p>\n","site":{"data":{"about":{"avatar":"../images/touxiang.jpg","name":"陈泽平","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]},"link":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Go":"https://go.dev/","PHP":"https://www.php.net/"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}},"hint.json":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n","slider.json":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}},"excerpt":"","more":"<p>Go语言中如何实现一个单例？很多Go语言学习者可能觉得这是一个很简单的问题，闭着眼都能写出来。但是其代码实现往往存在不少问题，下面先看一下一些常见的错误。</p>\n<h1 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h1><h2 id=\"没考虑并发安全\"><a href=\"#没考虑并发安全\" class=\"headerlink\" title=\"没考虑并发安全\"></a>没考虑并发安全</h2><p>示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var instance *User</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if instance == nil &#123;</span><br><span class=\"line\">        instance = &amp;User&#123;</span><br><span class=\"line\">            Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例中，多个goroutine有可能同时执行第一个检查，然后instance就会被执行多次赋值操作，在某些instance只能被赋值一次的业务场景，该操作就可能导致与期望不一致。</p>\n<h2 id=\"忽略代码非原子操作问题\"><a href=\"#忽略代码非原子操作问题\" class=\"headerlink\" title=\"忽略代码非原子操作问题\"></a>忽略代码非原子操作问题</h2><p>针对上面示例存在的并发问题，部分开发人员想我加个锁，问题不就解决了吗，于是将上面示例代码修改成如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    lock     sync.Mutex</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if instance == nil &#123;</span><br><span class=\"line\">        lock.Lock()</span><br><span class=\"line\">        defer lock.Unlock()</span><br><span class=\"line\">        if instance == nil &#123;</span><br><span class=\"line\">            instance = &amp;User&#123;</span><br><span class=\"line\">                Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上示例代码看似已经很完美了，但是当我们用go run -race检查时，会提示这段代码有DATA RACE的警告：</p>\n<blockquote>\n<p>WARNING: DATA RACE<br>Write at 0x00010507e6a0 by goroutine 6:<br> main.GetInstance()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:22 +0xf4<br> main.main.func1()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:32 +0x20</p>\n<p>Previous read at 0x00010507e6a0 by goroutine 8:<br> main.GetInstance()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:18 +0x30<br> main.main.func3()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:38 +0x20</p>\n<p>Goroutine 6 (running) created at:<br> main.main()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:31 +0x28</p>\n<p>Goroutine 8 (running) created at:<br> main.main()<br>     &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;race&#x2F;go_race_demo.go:37 +0x40</p>\n</blockquote>\n<p>大家可以亲自试一下，go_race_demo.go完整代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;sync&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    lock     sync.Mutex</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if instance == nil &#123;</span><br><span class=\"line\">        lock.Lock()</span><br><span class=\"line\">        defer lock.Unlock()</span><br><span class=\"line\">        if instance == nil &#123;</span><br><span class=\"line\">            instance = &amp;User&#123;</span><br><span class=\"line\">                Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;goroutine A&quot;, GetInstance())</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;goroutine B&quot;, GetInstance())</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;goroutine C&quot;, GetInstance())</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之所以会出现DATA RACE警告，是因为CPU在执行instance&#x3D;&amp;User{Name:”xiaoming”}这行代码时，并不是原子操作，这个赋值可能是会有几步指令，比如</p>\n<ol>\n<li>先new一个User</li>\n<li>然后设置Name&#x3D;xiaoming</li>\n<li>最后把了new的对象赋值给instance</li>\n</ol>\n<p>而且多个指令执行时，有可能会是乱序的，如果发生了乱序，可能会变成</p>\n<ol>\n<li>先了new一个User</li>\n<li>然后再赋值给instance</li>\n<li>最后再设置Name&#x3D;xiaoming</li>\n</ol>\n<p>goroutine A进来时拿到锁，然后执行instance&#x3D;&amp;User{Name:”xiaoming”}这句代码，这个时候有可能刚执行完指令2，还未执行指令3时，goroutine B对instance是否为nil进行了判断，发现非nil，就直接将instance的数据返回了，而此时的instance是个半初始化状态，这时就会有问题。</p>\n<h1 id=\"正确姿势\"><a href=\"#正确姿势\" class=\"headerlink\" title=\"正确姿势\"></a>正确姿势</h1><p>解决上面的问题，我们可以通过原子化加载并设置一个标志flag，该标志表明我们是否已初始化instance，改造后代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    lock     sync.Mutex</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">    flag     uint32</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    if atomic.LoadUint32(&amp;flag) != 1 &#123;</span><br><span class=\"line\">        lock.Lock()</span><br><span class=\"line\">        defer lock.Unlock()</span><br><span class=\"line\">        if instance == nil &#123;</span><br><span class=\"line\">            instance = &amp;User&#123;</span><br><span class=\"line\">                Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            atomic.StoreUint32(&amp;flag, 1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，我们主要是通过atomic.store和lock来保证flag和instance的修改对其他的goroutine可见，通过atomic.LoadUint32(&amp;flag)和double check来保证instance只会被初始化一次。<br>但是，这看起来有点繁琐，其实Go语言标准库sync已经为我们提供了实现goroutine同步比较好的方式，通过<code>sync.Once</code>来实现，示例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var (</span><br><span class=\"line\">    once sync.Once</span><br><span class=\"line\">    instance *User</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func GetInstance() *User &#123;</span><br><span class=\"line\">    once.Do(func() &#123;</span><br><span class=\"line\">        instance = &amp;User&#123;</span><br><span class=\"line\">            Name: &quot;xiaoming&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return instance</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，我们可以首选<code>sync.Once</code>来实现单例模式。</p>\n"},{"title":"Go语言中的defer","date":"2023-10-24T13:34:20.000Z","_content":"defer的功能是在作用域结束之后执行收尾的函数，defer的行为可以总结为如下四条：  \n1. defer函数的参数，是在defer函数被定义的时候就已经明确了。 \n2. defer函数是在return执行之后运行的。\n3. 函数运行过程中出现panic，defer函数也会被执行。\n4. defer函数的执行顺序是后进先出。\n\n下面我们通过一些例子，来详细介绍下这四条规则。  \n1）defer函数的参数，是在defer函数被定义的时候就已经明确了。   \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a()\n}\nfunc a() {\n    i := 0\n    defer fmt.Println(i)\n    i++\n    return\n}\n```\n上面示例输出结果：0。defer调用fmt.Println(i)时，会对函数中引用的外部参数进行拷贝，所以i++操作并没有影响到defer里的i值。  \n再看下面这个例子：  \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a()\n}\nfunc a() {\n    i := 0\n    defer func() {\n        fmt.Println(i)\n    }()\n    i++\n    return\n}\n```\n这个示例输出结果是：1。为什么跟上一个示例输出结果不一样呢？因为这里defer后面是一个匿名函数，而i并不是该匿名函数的外部参数，这里大家一定要注意。  \n  \n2）defer函数是在return执行之后运行的。  \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"main\", a())\n}\nfunc a() int {\n    i := 0\n    defer func() {\n        i++\n        fmt.Println(\"defer\", i)\n    }()\n    return i\n}\n```\n该示例运行结果是：\n>defer 1\n>main 0\n\n虽然在defer里对i进行了操作，但是因为defer是在return执行之后运行的，所以并不会影响返回值。  \n  \n3）函数运行过程中出现panic，defer函数也会被执行。\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"main\", a())\n}\nfunc a() int {\n    i := 0\n    defer func() {\n        i++\n        fmt.Println(\"defer1\", i)\n    }()\n    panic(\"I'm panic\")\n    fmt.Println(\"after panic\")\n    defer func() {\n        i++\n        fmt.Println(\"defer2\", i)\n    }()\n    return i\n}\n```\n该示例运行结果是：\n>defer1 1\n>panic: I'm panic\n>\n>goroutine 1 [running]:\n>main.a()\n>        /Users/chenzeping/go/src/gostudy/defer/main.go:14 +0x68\n>main.main()\n>        /Users/chenzeping/go/src/gostudy/defer/main.go:6 +0x1c\n>exit status 2\n\n可以看到，在panic之前的defer被执行了，然后才是panic，panic之后的代码都没有执行。至于为什么defer会被执行，我在后面的博客[Go语言异常处理机制](/2023/10/25/golang-exception-handle)中会详细解答。  \n  \n4）defer函数的执行顺序是后进先出。  \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a()\n}\nfunc a() {\n    defer fmt.Println(\"defer1\")\n    defer fmt.Println(\"defer2\")\n    return\n}\n```\n该示例运行结果是：\n>defer2\n>defer1\n\n可以看到，先执行了defer2，后执行了defer1。这个也好理解，每次defer都会把一个函数压入栈中，函数返回前再把延迟的函数从栈中取出并执行，顺序是后进先出。  \n","source":"_posts/golang-defer.md","raw":"---\ntitle: Go语言中的defer\ndate: 2023-10-24 21:34:20\ntags:\n  - Go\n  - defer\ncategories:\n  - 技术\n  - 编程语言\n  - Go\n---\ndefer的功能是在作用域结束之后执行收尾的函数，defer的行为可以总结为如下四条：  \n1. defer函数的参数，是在defer函数被定义的时候就已经明确了。 \n2. defer函数是在return执行之后运行的。\n3. 函数运行过程中出现panic，defer函数也会被执行。\n4. defer函数的执行顺序是后进先出。\n\n下面我们通过一些例子，来详细介绍下这四条规则。  \n1）defer函数的参数，是在defer函数被定义的时候就已经明确了。   \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a()\n}\nfunc a() {\n    i := 0\n    defer fmt.Println(i)\n    i++\n    return\n}\n```\n上面示例输出结果：0。defer调用fmt.Println(i)时，会对函数中引用的外部参数进行拷贝，所以i++操作并没有影响到defer里的i值。  \n再看下面这个例子：  \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a()\n}\nfunc a() {\n    i := 0\n    defer func() {\n        fmt.Println(i)\n    }()\n    i++\n    return\n}\n```\n这个示例输出结果是：1。为什么跟上一个示例输出结果不一样呢？因为这里defer后面是一个匿名函数，而i并不是该匿名函数的外部参数，这里大家一定要注意。  \n  \n2）defer函数是在return执行之后运行的。  \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"main\", a())\n}\nfunc a() int {\n    i := 0\n    defer func() {\n        i++\n        fmt.Println(\"defer\", i)\n    }()\n    return i\n}\n```\n该示例运行结果是：\n>defer 1\n>main 0\n\n虽然在defer里对i进行了操作，但是因为defer是在return执行之后运行的，所以并不会影响返回值。  \n  \n3）函数运行过程中出现panic，defer函数也会被执行。\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"main\", a())\n}\nfunc a() int {\n    i := 0\n    defer func() {\n        i++\n        fmt.Println(\"defer1\", i)\n    }()\n    panic(\"I'm panic\")\n    fmt.Println(\"after panic\")\n    defer func() {\n        i++\n        fmt.Println(\"defer2\", i)\n    }()\n    return i\n}\n```\n该示例运行结果是：\n>defer1 1\n>panic: I'm panic\n>\n>goroutine 1 [running]:\n>main.a()\n>        /Users/chenzeping/go/src/gostudy/defer/main.go:14 +0x68\n>main.main()\n>        /Users/chenzeping/go/src/gostudy/defer/main.go:6 +0x1c\n>exit status 2\n\n可以看到，在panic之前的defer被执行了，然后才是panic，panic之后的代码都没有执行。至于为什么defer会被执行，我在后面的博客[Go语言异常处理机制](/2023/10/25/golang-exception-handle)中会详细解答。  \n  \n4）defer函数的执行顺序是后进先出。  \n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a()\n}\nfunc a() {\n    defer fmt.Println(\"defer1\")\n    defer fmt.Println(\"defer2\")\n    return\n}\n```\n该示例运行结果是：\n>defer2\n>defer1\n\n可以看到，先执行了defer2，后执行了defer1。这个也好理解，每次defer都会把一个函数压入栈中，函数返回前再把延迟的函数从栈中取出并执行，顺序是后进先出。  \n","slug":"golang-defer","published":1,"updated":"2023-10-25T09:45:37.790Z","_id":"clo54ymo40000dcl2bmgg4ls8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>defer的功能是在作用域结束之后执行收尾的函数，defer的行为可以总结为如下四条：  </p>\n<ol>\n<li>defer函数的参数，是在defer函数被定义的时候就已经明确了。 </li>\n<li>defer函数是在return执行之后运行的。</li>\n<li>函数运行过程中出现panic，defer函数也会被执行。</li>\n<li>defer函数的执行顺序是后进先出。</li>\n</ol>\n<p>下面我们通过一些例子，来详细介绍下这四条规则。<br>1）defer函数的参数，是在defer函数被定义的时候就已经明确了。   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer fmt.Println(i)</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例输出结果：0。defer调用fmt.Println(i)时，会对函数中引用的外部参数进行拷贝，所以i++操作并没有影响到defer里的i值。<br>再看下面这个例子：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        fmt.Println(i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个示例输出结果是：1。为什么跟上一个示例输出结果不一样呢？因为这里defer后面是一个匿名函数，而i并不是该匿名函数的外部参数，这里大家一定要注意。  </p>\n<p>2）defer函数是在return执行之后运行的。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;main&quot;, a())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() int &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        fmt.Println(&quot;defer&quot;, i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    return i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例运行结果是：</p>\n<blockquote>\n<p>defer 1<br>main 0</p>\n</blockquote>\n<p>虽然在defer里对i进行了操作，但是因为defer是在return执行之后运行的，所以并不会影响返回值。  </p>\n<p>3）函数运行过程中出现panic，defer函数也会被执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;main&quot;, a())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() int &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        fmt.Println(&quot;defer1&quot;, i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">    fmt.Println(&quot;after panic&quot;)</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        fmt.Println(&quot;defer2&quot;, i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    return i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例运行结果是：</p>\n<blockquote>\n<p>defer1 1<br>panic: I’m panic</p>\n<p>goroutine 1 [running]:<br>main.a()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;defer&#x2F;main.go:14 +0x68<br>main.main()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;defer&#x2F;main.go:6 +0x1c<br>exit status 2</p>\n</blockquote>\n<p>可以看到，在panic之前的defer被执行了，然后才是panic，panic之后的代码都没有执行。至于为什么defer会被执行，我在后面的博客<a href=\"/2023/10/25/golang-exception-handle\">Go语言异常处理机制</a>中会详细解答。  </p>\n<p>4）defer函数的执行顺序是后进先出。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    defer fmt.Println(&quot;defer1&quot;)</span><br><span class=\"line\">    defer fmt.Println(&quot;defer2&quot;)</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例运行结果是：</p>\n<blockquote>\n<p>defer2<br>defer1</p>\n</blockquote>\n<p>可以看到，先执行了defer2，后执行了defer1。这个也好理解，每次defer都会把一个函数压入栈中，函数返回前再把延迟的函数从栈中取出并执行，顺序是后进先出。  </p>\n","site":{"data":{"about":{"avatar":"../images/touxiang.jpg","name":"陈泽平","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]},"link":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Go":"https://go.dev/","PHP":"https://www.php.net/"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}},"hint.json":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n","slider.json":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}},"excerpt":"","more":"<p>defer的功能是在作用域结束之后执行收尾的函数，defer的行为可以总结为如下四条：  </p>\n<ol>\n<li>defer函数的参数，是在defer函数被定义的时候就已经明确了。 </li>\n<li>defer函数是在return执行之后运行的。</li>\n<li>函数运行过程中出现panic，defer函数也会被执行。</li>\n<li>defer函数的执行顺序是后进先出。</li>\n</ol>\n<p>下面我们通过一些例子，来详细介绍下这四条规则。<br>1）defer函数的参数，是在defer函数被定义的时候就已经明确了。   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer fmt.Println(i)</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面示例输出结果：0。defer调用fmt.Println(i)时，会对函数中引用的外部参数进行拷贝，所以i++操作并没有影响到defer里的i值。<br>再看下面这个例子：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        fmt.Println(i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    i++</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个示例输出结果是：1。为什么跟上一个示例输出结果不一样呢？因为这里defer后面是一个匿名函数，而i并不是该匿名函数的外部参数，这里大家一定要注意。  </p>\n<p>2）defer函数是在return执行之后运行的。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;main&quot;, a())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() int &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        fmt.Println(&quot;defer&quot;, i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    return i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例运行结果是：</p>\n<blockquote>\n<p>defer 1<br>main 0</p>\n</blockquote>\n<p>虽然在defer里对i进行了操作，但是因为defer是在return执行之后运行的，所以并不会影响返回值。  </p>\n<p>3）函数运行过程中出现panic，defer函数也会被执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;main&quot;, a())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() int &#123;</span><br><span class=\"line\">    i := 0</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        fmt.Println(&quot;defer1&quot;, i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">    fmt.Println(&quot;after panic&quot;)</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        fmt.Println(&quot;defer2&quot;, i)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    return i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例运行结果是：</p>\n<blockquote>\n<p>defer1 1<br>panic: I’m panic</p>\n<p>goroutine 1 [running]:<br>main.a()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;defer&#x2F;main.go:14 +0x68<br>main.main()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;defer&#x2F;main.go:6 +0x1c<br>exit status 2</p>\n</blockquote>\n<p>可以看到，在panic之前的defer被执行了，然后才是panic，panic之后的代码都没有执行。至于为什么defer会被执行，我在后面的博客<a href=\"/2023/10/25/golang-exception-handle\">Go语言异常处理机制</a>中会详细解答。  </p>\n<p>4）defer函数的执行顺序是后进先出。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    defer fmt.Println(&quot;defer1&quot;)</span><br><span class=\"line\">    defer fmt.Println(&quot;defer2&quot;)</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例运行结果是：</p>\n<blockquote>\n<p>defer2<br>defer1</p>\n</blockquote>\n<p>可以看到，先执行了defer2，后执行了defer1。这个也好理解，每次defer都会把一个函数压入栈中，函数返回前再把延迟的函数从栈中取出并执行，顺序是后进先出。  </p>\n"},{"title":"Go语言异常处理机制","date":"2023-10-25T02:34:51.000Z","_content":"Go语言舍弃了传统的 try...catch 类似的异常处理机制，但是我们仍然可以通过Go语言提供了 panic 和 recover 函数，配合 defer 语句灵活地处理运行时的异常。  \n# 名词介绍\n## panic\nGo语言的内置方法，能够改变程序的控制流。当函数调用了panic，函数会停止运行，但是defer函数仍然会运行，程序会在当前panic的goroutine全部退栈以后crash。\n## recover\nGo语言的内置方法，用于恢复发生panic的goroutine的控制。如果当前goroutine将要发生panic的话，recover会捕获这个panic，并恢复正常执行。\n## defer\nGo语言的关键字，用来延迟执行函数的，延迟的发生是在调用函数的return之后。关于defer，我在博客[Go语言中的defer](/2023/10/24/golang-defer)中详细介绍过。而在这里为什么会提到defer呢？这是因为recover只在defer函数中生效。\n# 常见用法\n如下是一个常见的捕获异常的例子\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    defer func() {\n        if err := recover(); err != nil {\n            fmt.Println(\"catch panic:\", err)\n        }\n    }()\n    panic(\"I'm panic\")\n}\n```\n输出结果为：\n>catch panic: I'm panic\n\n需要注意的几个点：  \n1）recover只在defer函数中生效  \n下面这几种写法，都不会捕获panic\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    if err := recover(); err != nil {\n        fmt.Println(\"catch panic:\", err)\n    }\n    panic(\"I'm panic\")\n}\n```\n该示例输出结果：\n>panic: I'm panic\n>\n>goroutine 1 [running]:\n>main.main()\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:9 +0x3c\n>exit status 2\n\n上面示例中recover()在panic之前运行，此时panic还未发生，肯定不会捕获panic。  \n再看下面这个例子\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    panic(\"I'm panic\")\n    if err := recover(); err != nil {\n        fmt.Println(\"catch panic:\", err)\n    }\n}\n```\n该示例输出结果：\n>panic: I'm panic\n>\n>goroutine 1 [running]:\n>main.main()\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:6 +0x2c\n>exit status 2\n\n上面示例中recover()虽然写在了panic之后，但是由于panic后，后面的代码不会被执行，所以程序执行不到recover()，也就无法捕获panic。  \n\n2）recover只能捕获当前goroutine的panic\n看下面这个例子\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    a()\n    time.Sleep(2 * time.Second)\n}\n\nfunc a() {\n    defer func() {\n        fmt.Println(\"in defer\")\n        if err := recover(); err != nil {\n            fmt.Println(\"catch panic:\", err)\n        }\n    }()\n    go func() {\n        time.Sleep(1 * time.Second)\n        panic(\"I'm panic\")\n    }()\n}\n```\n输出结果为：\n>in defer\n>panic: I'm panic\n>\n>goroutine 18 [running]:\n>main.a.func2()\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:22 +0x38\n>created by main.a\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:20 +0x40\n>exit status 2\n\n从上面例子可以看出，其他goroutine中的panic并没有被recover捕获，从而最终导致程序崩溃。\n","source":"_posts/golang-exception-handle.md","raw":"---\ntitle: Go语言异常处理机制\ndate: 2023-10-25 10:34:51\ntags:\n  - Go\n  - panic\n  - recover\n  - defer\ncategories:\n  - 技术\n  - 编程语言\n  - Go\n---\nGo语言舍弃了传统的 try...catch 类似的异常处理机制，但是我们仍然可以通过Go语言提供了 panic 和 recover 函数，配合 defer 语句灵活地处理运行时的异常。  \n# 名词介绍\n## panic\nGo语言的内置方法，能够改变程序的控制流。当函数调用了panic，函数会停止运行，但是defer函数仍然会运行，程序会在当前panic的goroutine全部退栈以后crash。\n## recover\nGo语言的内置方法，用于恢复发生panic的goroutine的控制。如果当前goroutine将要发生panic的话，recover会捕获这个panic，并恢复正常执行。\n## defer\nGo语言的关键字，用来延迟执行函数的，延迟的发生是在调用函数的return之后。关于defer，我在博客[Go语言中的defer](/2023/10/24/golang-defer)中详细介绍过。而在这里为什么会提到defer呢？这是因为recover只在defer函数中生效。\n# 常见用法\n如下是一个常见的捕获异常的例子\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    defer func() {\n        if err := recover(); err != nil {\n            fmt.Println(\"catch panic:\", err)\n        }\n    }()\n    panic(\"I'm panic\")\n}\n```\n输出结果为：\n>catch panic: I'm panic\n\n需要注意的几个点：  \n1）recover只在defer函数中生效  \n下面这几种写法，都不会捕获panic\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    if err := recover(); err != nil {\n        fmt.Println(\"catch panic:\", err)\n    }\n    panic(\"I'm panic\")\n}\n```\n该示例输出结果：\n>panic: I'm panic\n>\n>goroutine 1 [running]:\n>main.main()\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:9 +0x3c\n>exit status 2\n\n上面示例中recover()在panic之前运行，此时panic还未发生，肯定不会捕获panic。  \n再看下面这个例子\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    panic(\"I'm panic\")\n    if err := recover(); err != nil {\n        fmt.Println(\"catch panic:\", err)\n    }\n}\n```\n该示例输出结果：\n>panic: I'm panic\n>\n>goroutine 1 [running]:\n>main.main()\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:6 +0x2c\n>exit status 2\n\n上面示例中recover()虽然写在了panic之后，但是由于panic后，后面的代码不会被执行，所以程序执行不到recover()，也就无法捕获panic。  \n\n2）recover只能捕获当前goroutine的panic\n看下面这个例子\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    a()\n    time.Sleep(2 * time.Second)\n}\n\nfunc a() {\n    defer func() {\n        fmt.Println(\"in defer\")\n        if err := recover(); err != nil {\n            fmt.Println(\"catch panic:\", err)\n        }\n    }()\n    go func() {\n        time.Sleep(1 * time.Second)\n        panic(\"I'm panic\")\n    }()\n}\n```\n输出结果为：\n>in defer\n>panic: I'm panic\n>\n>goroutine 18 [running]:\n>main.a.func2()\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:22 +0x38\n>created by main.a\n>        /Users/chenzeping/go/src/gostudy/panic/main.go:20 +0x40\n>exit status 2\n\n从上面例子可以看出，其他goroutine中的panic并没有被recover捕获，从而最终导致程序崩溃。\n","slug":"golang-exception-handle","published":1,"updated":"2023-10-25T09:44:34.673Z","_id":"clo57qxwc0000hjl2be52e5ih","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Go语言舍弃了传统的 try…catch 类似的异常处理机制，但是我们仍然可以通过Go语言提供了 panic 和 recover 函数，配合 defer 语句灵活地处理运行时的异常。  </p>\n<h1 id=\"名词介绍\"><a href=\"#名词介绍\" class=\"headerlink\" title=\"名词介绍\"></a>名词介绍</h1><h2 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h2><p>Go语言的内置方法，能够改变程序的控制流。当函数调用了panic，函数会停止运行，但是defer函数仍然会运行，程序会在当前panic的goroutine全部退栈以后crash。</p>\n<h2 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h2><p>Go语言的内置方法，用于恢复发生panic的goroutine的控制。如果当前goroutine将要发生panic的话，recover会捕获这个panic，并恢复正常执行。</p>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p>Go语言的关键字，用来延迟执行函数的，延迟的发生是在调用函数的return之后。关于defer，我在博客<a href=\"/2023/10/24/golang-defer\">Go语言中的defer</a>中详细介绍过。而在这里为什么会提到defer呢？这是因为recover只在defer函数中生效。</p>\n<h1 id=\"常见用法\"><a href=\"#常见用法\" class=\"headerlink\" title=\"常见用法\"></a>常见用法</h1><p>如下是一个常见的捕获异常的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<blockquote>\n<p>catch panic: I’m panic</p>\n</blockquote>\n<p>需要注意的几个点：<br>1）recover只在defer函数中生效<br>下面这几种写法，都不会捕获panic</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    if err := recover(); err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例输出结果：</p>\n<blockquote>\n<p>panic: I’m panic</p>\n<p>goroutine 1 [running]:<br>main.main()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:9 +0x3c<br>exit status 2</p>\n</blockquote>\n<p>上面示例中recover()在panic之前运行，此时panic还未发生，肯定不会捕获panic。<br>再看下面这个例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">    if err := recover(); err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例输出结果：</p>\n<blockquote>\n<p>panic: I’m panic</p>\n<p>goroutine 1 [running]:<br>main.main()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:6 +0x2c<br>exit status 2</p>\n</blockquote>\n<p>上面示例中recover()虽然写在了panic之后，但是由于panic后，后面的代码不会被执行，所以程序执行不到recover()，也就无法捕获panic。  </p>\n<p>2）recover只能捕获当前goroutine的panic<br>看下面这个例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">    time.Sleep(2 * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;in defer&quot;)</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        time.Sleep(1 * time.Second)</span><br><span class=\"line\">        panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<blockquote>\n<p>in defer<br>panic: I’m panic</p>\n<p>goroutine 18 [running]:<br>main.a.func2()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:22 +0x38<br>created by main.a<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:20 +0x40<br>exit status 2</p>\n</blockquote>\n<p>从上面例子可以看出，其他goroutine中的panic并没有被recover捕获，从而最终导致程序崩溃。</p>\n","site":{"data":{"about":{"avatar":"../images/touxiang.jpg","name":"陈泽平","tag":"后端/全栈","desc":"开发同学","skills":{"PHP":8,"Python":6,"Go":8,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"go-toolkit","image":"","tags":["2016年","项目标签"],"description":"go-toolkit","link_text":"网站链接","link":"https://github.com/nosewheel/toolkit"}],"reward":["../images/weixin_reward.jpg","../images/zhifubao_reward.jpg"]},"link":{"social":{"github":"https://github.com/nosewheel"},"extern":{"Go":"https://go.dev/","PHP":"https://www.php.net/"}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"Go程序设计语言","cover":"https://img2.doubanio.com/view/subject/l/public/s29458403.jpg","review":"go语言学习必读","score":"9.5","doubanLink":"https://book.douban.com/subject/27044219/"},{"title":"高性能MySQL（第4版）","cover":"https://img1.doubanio.com/view/subject/l/public/s34312038.jpg","review":"后端开发必读","score":"9.5","doubanLink":"https://book.douban.com/subject/36096578/"}],"reading":[{"title":"ChatGPT进阶 : 提示工程入门","cover":"https://img2.doubanio.com/view/subject/l/public/s34619521.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/36515079/"}],"wanted":[{"title":"机器学习","cover":"https://img1.doubanio.com/view/subject/l/public/s28735609.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26708119/"}]}},"hint.json":"{\n    \"new\": {\n        \"selector\": [\n            \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n","slider.json":"[{\n    \"image\": \"http://lorempixel.com/580/250/nature/1\",\n    \"align\": \"center\",\n    \"title\": \"This is our big Tagline!\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/2\",\n    \"align\": \"left\",\n    \"title\": \"Left Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}, {\n    \"image\": \"http://lorempixel.com/580/250/nature/3\",\n    \"align\": \"right\",\n    \"title\": \"Right Aligned Caption\",\n    \"subtitle\": \"Here's our small slogan.\",\n\t\"link\": null\n}]\n"}},"excerpt":"","more":"<p>Go语言舍弃了传统的 try…catch 类似的异常处理机制，但是我们仍然可以通过Go语言提供了 panic 和 recover 函数，配合 defer 语句灵活地处理运行时的异常。  </p>\n<h1 id=\"名词介绍\"><a href=\"#名词介绍\" class=\"headerlink\" title=\"名词介绍\"></a>名词介绍</h1><h2 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h2><p>Go语言的内置方法，能够改变程序的控制流。当函数调用了panic，函数会停止运行，但是defer函数仍然会运行，程序会在当前panic的goroutine全部退栈以后crash。</p>\n<h2 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h2><p>Go语言的内置方法，用于恢复发生panic的goroutine的控制。如果当前goroutine将要发生panic的话，recover会捕获这个panic，并恢复正常执行。</p>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p>Go语言的关键字，用来延迟执行函数的，延迟的发生是在调用函数的return之后。关于defer，我在博客<a href=\"/2023/10/24/golang-defer\">Go语言中的defer</a>中详细介绍过。而在这里为什么会提到defer呢？这是因为recover只在defer函数中生效。</p>\n<h1 id=\"常见用法\"><a href=\"#常见用法\" class=\"headerlink\" title=\"常见用法\"></a>常见用法</h1><p>如下是一个常见的捕获异常的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<blockquote>\n<p>catch panic: I’m panic</p>\n</blockquote>\n<p>需要注意的几个点：<br>1）recover只在defer函数中生效<br>下面这几种写法，都不会捕获panic</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    if err := recover(); err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例输出结果：</p>\n<blockquote>\n<p>panic: I’m panic</p>\n<p>goroutine 1 [running]:<br>main.main()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:9 +0x3c<br>exit status 2</p>\n</blockquote>\n<p>上面示例中recover()在panic之前运行，此时panic还未发生，肯定不会捕获panic。<br>再看下面这个例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">    if err := recover(); err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该示例输出结果：</p>\n<blockquote>\n<p>panic: I’m panic</p>\n<p>goroutine 1 [running]:<br>main.main()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:6 +0x2c<br>exit status 2</p>\n</blockquote>\n<p>上面示例中recover()虽然写在了panic之后，但是由于panic后，后面的代码不会被执行，所以程序执行不到recover()，也就无法捕获panic。  </p>\n<p>2）recover只能捕获当前goroutine的panic<br>看下面这个例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a()</span><br><span class=\"line\">    time.Sleep(2 * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func a() &#123;</span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        fmt.Println(&quot;in defer&quot;)</span><br><span class=\"line\">        if err := recover(); err != nil &#123;</span><br><span class=\"line\">            fmt.Println(&quot;catch panic:&quot;, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        time.Sleep(1 * time.Second)</span><br><span class=\"line\">        panic(&quot;I&#x27;m panic&quot;)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<blockquote>\n<p>in defer<br>panic: I’m panic</p>\n<p>goroutine 18 [running]:<br>main.a.func2()<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:22 +0x38<br>created by main.a<br>       &#x2F;Users&#x2F;chenzeping&#x2F;go&#x2F;src&#x2F;gostudy&#x2F;panic&#x2F;main.go:20 +0x40<br>exit status 2</p>\n</blockquote>\n<p>从上面例子可以看出，其他goroutine中的panic并没有被recover捕获，从而最终导致程序崩溃。</p>\n"}],"PostAsset":[{"_id":"source/_posts/apple-arm-gomonkey-error/1280X1280.png","slug":"1280X1280.png","post":"clnmvsboc0000kgl21t39fp03","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clnmvsboc0000kgl21t39fp03","category_id":"clnx5xrpr000081l24q4p3ci1","_id":"clnx5xrpu000e81l23p9pgh3d"},{"post_id":"clnmvsboc0000kgl21t39fp03","category_id":"clnx5xrpt000481l2f1b28bn6","_id":"clnx5xrpu000f81l2hjo21mcq"},{"post_id":"clnmvsboc0000kgl21t39fp03","category_id":"clnx5xrpu000a81l26v29060h","_id":"clnx5xrpu000g81l2b9uu6n3f"},{"post_id":"clnlh3nnh0000e1l2c8msbwqd","category_id":"clnx5xrpr000081l24q4p3ci1","_id":"clnx5xrpu000h81l2g58ockms"},{"post_id":"clnlh3nnh0000e1l2c8msbwqd","category_id":"clnx5xrpt000881l2dhhrgvld","_id":"clnx5xrpu000i81l29fx8evvy"},{"post_id":"clnlh3nnh0000e1l2c8msbwqd","category_id":"clnx5xrpu000d81l21nymfg8s","_id":"clnx5xrpu000j81l2gxardum2"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","category_id":"clnx5xrpr000081l24q4p3ci1","_id":"clnxzbf1w0002mml2a2h48zw0"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","category_id":"clnx5xrpt000481l2f1b28bn6","_id":"clnxzbf1w0004mml22v4hhg7i"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","category_id":"clnx5xrpu000a81l26v29060h","_id":"clnxzbf1w0005mml2129xb5kq"},{"post_id":"clo54ymo40000dcl2bmgg4ls8","category_id":"clnx5xrpr000081l24q4p3ci1","_id":"clo54ymo60002dcl22kz97wlo"},{"post_id":"clo54ymo40000dcl2bmgg4ls8","category_id":"clnx5xrpt000481l2f1b28bn6","_id":"clo54ymo60003dcl28zp12sio"},{"post_id":"clo54ymo40000dcl2bmgg4ls8","category_id":"clnx5xrpu000a81l26v29060h","_id":"clo54ymo70005dcl2b2wr250z"},{"post_id":"clo57qxwc0000hjl2be52e5ih","category_id":"clnx5xrpr000081l24q4p3ci1","_id":"clo57qxwe0002hjl216td5zyy"},{"post_id":"clo57qxwc0000hjl2be52e5ih","category_id":"clnx5xrpt000481l2f1b28bn6","_id":"clo57qxwe0004hjl2hdcg8jc9"},{"post_id":"clo57qxwc0000hjl2be52e5ih","category_id":"clnx5xrpu000a81l26v29060h","_id":"clo57qxwe0005hjl2gxqk9tml"}],"PostTag":[{"post_id":"clnmvsboc0000kgl21t39fp03","tag_id":"clnx5xrps000181l2anxb5lfx","_id":"clnx5xrpt000681l2eqkj287e"},{"post_id":"clnmvsboc0000kgl21t39fp03","tag_id":"clnx5xrps000381l24zn65p99","_id":"clnx5xrpt000781l2b8ajg38r"},{"post_id":"clnlh3nnh0000e1l2c8msbwqd","tag_id":"clnx5xrpt000581l2ab029o6l","_id":"clnx5xrpu000b81l2ejlb6t5j"},{"post_id":"clnlh3nnh0000e1l2c8msbwqd","tag_id":"clnx5xrpt000981l2d9pk5edv","_id":"clnx5xrpu000c81l2aknn71ps"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","tag_id":"clnxzbf1v0001mml2c2uh1uw5","_id":"clnxzbf1w0008mml2c5bq1ftr"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","tag_id":"clnxzbf1w0003mml2hv8edtv8","_id":"clnxzbf1w0009mml2hdc1158s"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","tag_id":"clnxzbf1w0006mml263oy4rq4","_id":"clnxzbf1w000amml29ql336bd"},{"post_id":"clnxzbf1t0000mml25vvk1gnb","tag_id":"clnxzbf1w0007mml2a9zlf8ip","_id":"clnxzbf1w000bmml2hprzcrhy"},{"post_id":"clo54ymo40000dcl2bmgg4ls8","tag_id":"clnxzbf1v0001mml2c2uh1uw5","_id":"clo54ymo60004dcl2783bdr4l"},{"post_id":"clo54ymo40000dcl2bmgg4ls8","tag_id":"clo54ymo60001dcl23fwm3ajt","_id":"clo54ymo70006dcl265ea6km7"},{"post_id":"clo57qxwc0000hjl2be52e5ih","tag_id":"clnxzbf1v0001mml2c2uh1uw5","_id":"clo57qxwe0006hjl2fv9yf6pk"},{"post_id":"clo57qxwc0000hjl2be52e5ih","tag_id":"clo57qxwd0001hjl2b43xa4dz","_id":"clo57qxwe0007hjl2baxjdjwc"},{"post_id":"clo57qxwc0000hjl2be52e5ih","tag_id":"clo57qxwe0003hjl246w8fzyc","_id":"clo57qxwe0008hjl2gn5cho2f"},{"post_id":"clo57qxwc0000hjl2be52e5ih","tag_id":"clo54ymo60001dcl23fwm3ajt","_id":"clo57qxwe0009hjl26q0thnnv"}],"Tag":[{"name":"arm","_id":"clnx5xrps000181l2anxb5lfx"},{"name":"gomonkey","_id":"clnx5xrps000381l24zn65p99"},{"name":"MySQL","_id":"clnx5xrpt000581l2ab029o6l"},{"name":"varchar","_id":"clnx5xrpt000981l2d9pk5edv"},{"name":"Go","_id":"clnxzbf1v0001mml2c2uh1uw5"},{"name":"单例","_id":"clnxzbf1w0003mml2hv8edtv8"},{"name":"并发","_id":"clnxzbf1w0006mml263oy4rq4"},{"name":"Go内存模型","_id":"clnxzbf1w0007mml2a9zlf8ip"},{"name":"defer","_id":"clo54ymo60001dcl23fwm3ajt"},{"name":"panic","_id":"clo57qxwd0001hjl2b43xa4dz"},{"name":"recover","_id":"clo57qxwe0003hjl246w8fzyc"}]}}